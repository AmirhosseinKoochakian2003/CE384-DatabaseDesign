-- course
CREATE TABLE COT (
    COID SERIAL PRIMARY KEY,
    TITLE VARCHAR(255),
    CREDIT INT
);

-- professor
CREATE TABLE PRT (
    PRID SERIAL PRIMARY KEY,
    PNAME VARCHAR(255)
);

-- course group
CREATE TABLE GT (
    COID SERIAL,
    GNUM SERIAL,
    TR SERIAL,
    YR SERIAL,
    PRID SERIAL,
	
	CONSTRAINT pk_gt PRIMARY KEY (COID, GNUM, TR, YR),
    CONSTRAINT fk_coid FOREIGN KEY (COID) REFERENCES COT (COID),
	CONSTRAINT fk_prid FOREIGN KEY (PRID) REFERENCES PRT (PRID)
);

-- student
CREATE TABLE STT (
    STID SERIAL PRIMARY KEY,
    STJ VARCHAR(255),
    STNAME VARCHAR(255)
);

CREATE TABLE STG (
    STID SERIAL,
    COID SERIAL,
    GNUM SERIAL,
    TR SERIAL,
    YR SERIAL,
    GRADE DECIMAL,
    
	CONSTRAINT pk PRIMARY KEY (STID, COID, GNUM, TR, YR),
	CONSTRAINT fk_stid FOREIGN KEY (STID) REFERENCES STT (STID),
    CONSTRAINT fk_coid FOREIGN KEY (COID) REFERENCES COT (COID),
    CONSTRAINT fk_gnum FOREIGN KEY (COID, GNUM, TR, YR) REFERENCES GT (COID, GNUM, TR, YR),
    CONSTRAINT fk_tr FOREIGN KEY (COID, GNUM, TR, YR) REFERENCES GT (COID, GNUM, TR, YR),
    CONSTRAINT fk_yr FOREIGN KEY (COID, GNUM, TR, YR) REFERENCES GT (COID, GNUM, TR, YR)
);

CREATE TABLE CORPRECOT (
    COID SERIAL,
    PRECOID SERIAL,
	
	CONSTRAINT pk_corprecot PRIMARY KEY (COID, PRECOID),
    CONSTRAINT fk_coid FOREIGN KEY (COID) REFERENCES COT (COID),
    CONSTRAINT fk_precoid FOREIGN KEY (PRECOID) REFERENCES COT (COID)
);
	
-- query 1
-- average = -1 means a student didn't choose any course
SELECT s.STID, s.STNAME, COALESCE(SUM(cot.CREDIT * stg.GRADE) / SUM(cot.CREDIT), -1) AS average
	FROM STT AS s
	LEFT OUTER JOIN STG AS stg ON s.STID = stg.STID
	LEFT OUTER JOIN COT AS cot ON stg.COID = cot.COID AND stg.GRADE IS NOT NULL
	GROUP BY s.STID, s.STNAME;
	
-- query 2
SELECT s.STID, s.STNAME
	FROM STT AS s
	INNER JOIN STG AS stg ON s.STID = stg.STID
	INNER JOIN COT AS cot ON stg.COID = cot.COID AND cot.TITLE = 'CE384'
	WHERE stg.GRADE < 10;
	
-- query 3
SELECT DISTINCT stg1.STID, stg2.STID 
	FROM STG AS stg1 
	INNER JOIN STG AS stg2 ON stg1.COID = stg2.COID AND
							  stg1.GNUM = stg2.GNUM AND
							  stg1.YR = stg2.YR AND 
							  stg1.TR = stg2.TR AND 
							  stg1.STID != stg2.STID
	GROUP BY stg1.STID, stg2.STID
	HAVING stg1.STID < stg2.STID AND COUNT(stg1.STID) >= 10;
	
-- query 4
SELECT DISTINCT st1.STID, st2.STID 
	FROM STT AS st1 
	INNER JOIN STT AS st2 ON st1.STID < st2.STID
	WHERE st2.STID NOT IN(SELECT stg2.STID
   						FROM STG AS stg1
    					INNER JOIN STG stg2 ON stg1.COID = stg2.COID
    					WHERE st1.STID = stg1.STID AND st2.STID = stg2.STID AND stg1.GNUM = stg2.GNUM AND stg1.TR = stg2.TR AND stg1.YR = stg2.YR)
						ORDER BY st1.STID, st2.STID;
	
-- query 5
SELECT prt.PNAME 
	FROM PRT AS prt
	INNER JOIN GT AS gt ON prt.PRID = gt.PRID
	INNER JOIN STG AS stg ON stg.COID = gt.COID AND gt.GNUM = stg.GNUM AND gt.TR = stg.TR AND gt.YR = stg.YR
	INNER JOIN COT AS cot ON cot.COID = gt.COID
	GROUP BY prt.PRID, prt.PNAME
	HAVING SUM(cot.CREDIT * stg.GRADE) / SUM(cot.CREDIT) > 16;
	
-- query 6
SELECT DISTINCT p.PRID, p.PNAME
	FROM PRT AS p
	LEFT JOIN GT AS gt ON p.PRID = gt.PRID
	GROUP BY p.PRID, p.PNAME, gt.TR, gt.YR
	HAVING COUNT(p.PRID) < 2;
	
-- query 7
SELECT stg.STID
	FROM STG AS stg 
	WHERE stg.STID != '777' AND stg.COID IN (SELECT DISTINCT stg3.COID FROM STG AS stg3 WHERE stg3.STID = '777')
	GROUP BY stg.STID
	HAVING COUNT(DISTINCT stg.COID) = (SELECT COUNT(DISTINCT stg2.COID) 
									  	FROM STG AS stg2
									  	WHERE stg2.STID = '777');

-- query 8
SELECT DISTINCT stg.COID
	FROM STG AS stg
	WHERE stg.TR = 2 AND stg.YR = 1393
	  AND NOT EXISTS (
		SELECT 1
		FROM STG AS stg2
		LEFT JOIN STT AS st ON stg2.STID = st.STID AND st.STJ = 'SW'
		WHERE stg2.COID = stg.COID AND stg2.TR = 2 AND stg2.YR = 1393 AND st.STID IS NULL);

-- query 9
WITH avg_groups AS(
	SELECT stg.COID, stg.GNUM, stg.YR, stg.TR, AVG(stg.GRADE) AS AVERAGE
		FROM STG AS stg
		GROUP BY stg.COID, stg.GNUM, stg.YR, stg.TR
),
min_groups AS(
	SELECT ag.COID, MIN(ag.AVERAGE) AS MINIMUM
		FROM avg_groups as ag
		GROUP BY ag.COID
)
SELECT ag.COID, ag.AVERAGE, gt.GNUM, ag.TR, ag.YR, prt.PNAME
	   FROM avg_groups AS ag
	   INNER JOIN min_groups AS mg ON ag.COID = mg.COID AND ag.AVERAGE = mg.MINIMUM
	   INNER JOIN GT AS gt ON gt.COID = ag.COID AND gt.GNUM = ag.GNUM AND gt.TR = ag.TR AND gt.YR = ag.YR
	   INNER JOIN PRT AS prt ON prt.PRID = gt.PRID;
